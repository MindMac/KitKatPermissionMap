Permission:android.permission.BROADCAST_STICKY
1 Callers:
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> ()
Permission:android.permission.WRITE_SMS
14 Callers:
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> ()
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> ()
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ()
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageMms(long)> ()
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> ()
Permission:android.permission.WRITE_CALL_LOG
2 Callers:
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> ()
<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)> ()
Permission:android.permission.READ_PHONE_STATE
23 Callers:
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()> ()
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getGroupIdLevel1()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getGroupIdLevel1()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> ()
Permission:android.permission.WRITE_USER_DICTIONARY
3 Callers:
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ()
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> ()
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> ()
Permission:android.permission.WRITE_SYNC_SETTINGS
12 Callers:
<com.android.server.content.ContentService: void sync(android.content.SyncRequest)> (1)
<android.content.IContentService$Stub$Proxy: void sync(android.content.SyncRequest)> ()
<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ()
<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ()
<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ()
<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)> (1)
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> ()
Permission:android.permission.READ_USER_DICTIONARY
8 Callers:
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: boolean hasWord(java.lang.String,android.content.Context)> ()
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ()
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> ()
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.providers.userdictionary.DictionaryBackupAgent: byte[] getDictionary()> ()
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: java.util.TreeSet getUserDictionaryLocalesSet(android.app.Activity)> ()
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: android.database.Cursor createCursor(java.lang.String)> ()
Permission:android.permission.GET_TASKS
2 Callers:
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> ()
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)> ()
Permission:android.permission.EXPAND_STATUS_BAR
1 Callers:
<com.android.server.StatusBarManagerService: void enforceExpandStatusBar()> ()
Permission:android.permission.ACCESS_FINE_LOCATION
2 Callers:
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)> ()
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)> ()
Permission:android.permission.FLASHLIGHT
2 Callers:
<com.android.server.LightsService$1: void setFlashlightEnabled(boolean)> (1)
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> ()
Permission:android.permission.BLUETOOTH
104 Callers:
<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> ()
<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> ()
<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> ()
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> ()
<com.android.server.BluetoothManagerService: java.lang.String getName()> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> ()
<com.android.bluetooth.hid.HidService: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<com.android.bluetooth.btservice.AdapterService: boolean isEnabled()> ()
<com.android.bluetooth.btservice.AdapterService: int getState()> ()
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()> ()
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()> ()
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()> ()
<com.android.bluetooth.btservice.AdapterService: int getScanMode()> ()
<com.android.bluetooth.btservice.AdapterService: boolean setScanMode(int,int)> ()
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()> ()
<com.android.bluetooth.btservice.AdapterService: boolean setDiscoverableTimeout(int)> ()
<com.android.bluetooth.btservice.AdapterService: boolean isDiscovering()> ()
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()> ()
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()> ()
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)> ()
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: int getRemoteType(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> ()
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> ()
<com.android.bluetooth.btservice.AdapterService: boolean configHciSnoopLog(boolean)> ()
<com.android.bluetooth.gatt.GattService: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<com.android.bluetooth.gatt.GattService: void stopScan(int,boolean)> ()
<com.android.bluetooth.gatt.GattService: void registerClient(java.util.UUID,android.bluetooth.IBluetoothGattCallback)> ()
<com.android.bluetooth.gatt.GattService: void unregisterClient(int)> ()
<com.android.bluetooth.gatt.GattService: void clientConnect(int,java.lang.String,boolean)> ()
<com.android.bluetooth.gatt.GattService: void clientDisconnect(int,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.gatt.GattService: void refreshDevice(int,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void discoverServices(int,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void readCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int)> ()
<com.android.bluetooth.gatt.GattService: void writeCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,int,byte[])> ()
<com.android.bluetooth.gatt.GattService: void readDescriptor(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,java.util.UUID,int)> ()
<com.android.bluetooth.gatt.GattService: void writeDescriptor(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,java.util.UUID,int,int,byte[])> ()
<com.android.bluetooth.gatt.GattService: void beginReliableWrite(int,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void endReliableWrite(int,java.lang.String,boolean)> ()
<com.android.bluetooth.gatt.GattService: void registerForNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean)> ()
<com.android.bluetooth.gatt.GattService: void readRemoteRssi(int,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void registerServer(java.util.UUID,android.bluetooth.IBluetoothGattServerCallback)> ()
<com.android.bluetooth.gatt.GattService: void unregisterServer(int)> ()
<com.android.bluetooth.gatt.GattService: void serverConnect(int,java.lang.String,boolean)> ()
<com.android.bluetooth.gatt.GattService: void serverDisconnect(int,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void beginServiceDeclaration(int,int,int,int,java.util.UUID)> ()
<com.android.bluetooth.gatt.GattService: void addIncludedService(int,int,int,java.util.UUID)> ()
<com.android.bluetooth.gatt.GattService: void addCharacteristic(int,java.util.UUID,int,int)> ()
<com.android.bluetooth.gatt.GattService: void addDescriptor(int,java.util.UUID,int)> ()
<com.android.bluetooth.gatt.GattService: void endServiceDeclaration(int)> ()
<com.android.bluetooth.gatt.GattService: void removeService(int,int,int,java.util.UUID)> ()
<com.android.bluetooth.gatt.GattService: void clearServices(int)> ()
<com.android.bluetooth.gatt.GattService: void sendResponse(int,java.lang.String,int,int,int,byte[])> ()
<com.android.bluetooth.gatt.GattService: void sendNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean,byte[])> ()
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: int getState()> (1)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> (1)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.hfp.HeadsetService: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean isAudioOn()> ()
<com.android.bluetooth.hfp.HeadsetService: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean connectAudio()> ()
<com.android.bluetooth.hfp.HeadsetService: boolean disconnectAudio()> ()
<com.android.bluetooth.hfp.HeadsetService: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: com.android.bluetooth.map.BluetoothMapService getService()> ()
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.a2dp.A2dpService: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hdp.HealthService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> ()
<com.android.bluetooth.hdp.HealthService: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<com.android.bluetooth.hdp.HealthService: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()> ()
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)> ()
<android.bluetooth.BluetoothSocket: void initSocketNative()> ()
Permission:android.permission.READ_CALENDAR
54 Callers:
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> ()
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> ()
<com.android.exchange.service.EasCalendarSyncHandler: void <init>(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,android.os.Bundle,android.content.SyncResult)> ()
<com.android.calendar.alerts.GlobalDismissManager: java.util.Map lookupCalendarToAccountMap(android.content.Context,java.util.Set)> ()
<android.provider.CalendarContract$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> ()
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> ()
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int)> ()
<com.android.calendar.GoogleCalendarUriIntentFilter: void onCreate(android.os.Bundle)> ()
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> ()
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$RefreshCalendars: void run()> ()
<com.android.calendar.alerts.AlertService: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,com.android.calendar.alerts.AlarmManagerInterface)> ()
<com.android.exchange.adapter.CalendarSyncParser$CalendarOperations: void updatedExtendedProperty(java.lang.String,java.lang.String,long)> ()
<com.android.calendar.alerts.GlobalDismissManager: java.util.Map lookupEventToCalendarMap(android.content.Context,java.util.Set)> ()
<com.android.calendar.event.CreateEventDialogFragment: void onActivityCreated(android.os.Bundle)> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> ()
<com.android.calendar.alerts.AlertActivity: void onResume()> ()
<com.android.email.activity.EventViewer: void onCreate(android.os.Bundle)> ()
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getAttendeesCursor(android.content.Context,long)> ()
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> ()
<com.android.calendar.alerts.AlarmScheduler: android.database.Cursor queryUpcomingEvents(android.content.Context,android.content.ContentResolver,long)> ()
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> ()
<com.android.calendar.CalendarColorPickerDialog$QueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> ()
<com.android.exchange.ExchangeService$CalendarObserver: void <init>(com.android.exchange.ExchangeService,android.os.Handler,com.android.emailcommon.provider.Account)> ()
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> ()
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getEventCursor(android.content.Context,long)> ()
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onResume()> (1)
<com.android.exchange.adapter.CalendarSyncParser: android.database.Cursor getClientIdCursor(java.lang.String)> ()
<com.android.calendar.alerts.AlarmScheduler: void queryNextReminderAndSchedule(android.database.Cursor,android.content.Context,android.content.ContentResolver,com.android.calendar.alerts.AlarmManagerInterface,int,long)> ()
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> ()
<com.android.calendar.event.EditEventFragment: void startQuery()> ()
<com.android.exchange.adapter.CalendarSyncParser: android.database.Cursor getServerIdCursor(java.lang.String)> ()
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> ()
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> ()
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> ()
<com.android.emailsync.SyncManager$CalendarObserver: void <init>(com.android.emailsync.SyncManager,android.os.Handler,com.android.emailcommon.provider.Account)> ()
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> ()
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onResume()> ()
<com.android.calendar.Event: android.database.Cursor instancesQuery(android.content.ContentResolver,java.lang.String[],int,int,java.lang.String,java.lang.String[],java.lang.String)> ()
<com.android.calendar.EventInfoFragment: void updateCalendar(android.view.View)> ()
<com.android.emailsync.SyncManager$CalendarObserver$1: void run()> ()
<com.android.exchange.ExchangeService$CalendarObserver: void onChangeInBackground()> ()
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void eventsChanged()> ()
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getLocationCursor(android.content.Context,long)> ()
<com.android.calendar.CalendarColorPickerDialog: void startQuery()> ()
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> ()
<com.android.exchange.service.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle)> ()
<com.android.calendar.event.EventLocationAdapter: java.util.List queryRecentLocations(android.content.ContentResolver,java.lang.String)> ()
<com.android.exchange.service.EasCalendarSyncHandler: void markParentsOfDirtyEvents(java.lang.String,java.lang.String[])> ()
<com.android.calendar.selectcalendars.CalendarColorCache: void <init>(android.content.Context,com.android.calendar.selectcalendars.CalendarColorCache$OnCalendarColorsLoadedListener)> ()
<com.android.calendar.DayView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> ()
<android.provider.CalendarContract$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> ()
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.ACCESS_COARSE_LOCATION
3 Callers:
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> ()
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)> ()
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)> ()
Permission:android.permission.WRITE_SETTINGS
7 Callers:
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> ()
<com.android.server.power.PowerManagerService: void setStayOnSetting(int)> (1)
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> ()
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> ()
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> ()
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> ()
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> ()
Permission:android.permission.WAKE_LOCK
10 Callers:
<com.android.server.wifi.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> ()
<com.android.server.wifi.WifiService: boolean releaseWifiLock(android.os.IBinder)> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> ()
<com.android.server.power.PowerManagerService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> (1)
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> ()
<com.android.server.power.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> (1)
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> ()
<com.android.server.power.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (1)
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> ()
Permission:android.permission.INTERNET
22 Callers:
<com.android.server.NsdService: android.os.Messenger getMessenger()> (1)
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.provider.Downloads: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> ()
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> ()
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> ()
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)> ()
<java.net.DatagramSocket: void <init>(int)> ()
<java.net.HttpURLConnection: void <init>(int)> ()
<java.net.HttpURLConnection: void connect()> ()
<java.net.MulticastSocket: void <init>(int)> ()
<java.net.NetworkInterface: void <init>(int)> ()
<java.net.ServerSocket: void <init>(int)> ()
<java.net.ServerSocket: void bind(java.net.SocketAddress)> ()
<java.net.Socket: void <init>(int)> ()
<java.net.URL: java.lang.Object getContent()> ()
<java.net.URL: java.net.URLConnection openConnection()> ()
<java.net.URL: java.io.InputStream openStream()> ()
<java.net.URLConnection: void connect()> ()
<java.net.URLConnection: java.io.InputStream getInputStream()> ()
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)> ()
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> ()
<com.android.inputmethod.research.Uploader: boolean hasUploadingPermission()> ()
Permission:android.permission.CHANGE_NETWORK_STATE
2 Callers:
<com.android.server.ConnectivityService: void enforceChangePermission()> ()
<com.android.server.ConnectivityService: void enforceTetherChangePermission()> ()
Permission:android.permission.ACCESS_WIFI_STATE
2 Callers:
<android.net.wifi.p2p.WifiP2pService: void enforceAccessPermission()> ()
<com.android.server.wifi.WifiService: void enforceAccessPermission()> ()
Permission:android.permission.READ_SYNC_SETTINGS
8 Callers:
<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ()
<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ()
<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> ()
<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()> (1)
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomatically()> ()
Permission:android.permission.CHANGE_WIFI_STATE
2 Callers:
<android.net.wifi.p2p.WifiP2pService: void enforceChangePermission()> ()
<com.android.server.wifi.WifiService: void enforceChangePermission()> ()
Permission:android.permission.WRITE_EXTERNAL_STORAGE
1 Callers:
<com.android.inputmethod.latin.utils.UsabilityStudyLogUtils$2: void run()> ()
Permission:android.permission.SET_TIME_ZONE
2 Callers:
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> (1)
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> ()
Permission:android.permission.RECEIVE_BOOT_COMPLETED
9 Callers:
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> ()
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> ()
<com.android.server.RecognitionManagerService: void <init>(android.content.Context)> ()
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> ()
<com.android.server.WiredAccessoryManager: void <init>(android.content.Context,com.android.server.input.InputManagerService)> ()
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> ()
<com.android.server.am.ActivityManagerService: void finishBooting()> ()
<com.android.server.AppWidgetService: void systemRunning(boolean)> ()
<com.android.server.search.SearchManagerService: void <init>(android.content.Context)> ()
Permission:android.permission.BLUETOOTH_ADMIN
52 Callers:
<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableNoAutoConnect()> ()
<com.android.server.BluetoothManagerService: boolean enable()> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enable()> ()
<com.android.server.BluetoothManagerService: boolean disable(boolean)> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(boolean)> ()
<com.android.bluetooth.hid.HidService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<com.android.bluetooth.hid.HidService: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<com.android.bluetooth.hid.HidService: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<com.android.bluetooth.btservice.AdapterService: boolean enable(boolean)> ()
<com.android.bluetooth.btservice.AdapterService: boolean disable()> ()
<com.android.bluetooth.btservice.AdapterService: boolean setName(java.lang.String)> ()
<com.android.bluetooth.btservice.AdapterService: boolean startDiscovery()> ()
<com.android.bluetooth.btservice.AdapterService: boolean cancelDiscovery()> ()
<com.android.bluetooth.btservice.AdapterService: boolean createBond(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: boolean removeBond(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> ()
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (6)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.gatt.GattService: void startScan(int,boolean)> ()
<com.android.bluetooth.gatt.GattService: void startScanWithUuids(int,boolean,java.util.UUID[])> ()
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (1)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<com.android.bluetooth.hfp.HeadsetService: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.a2dp.A2dpService: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.a2dp.A2dpService: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.a2dp.A2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$1: void handleMessage(android.os.Message)> (1)
<com.android.bluetooth.map.BluetoothMapService$SocketAcceptThread: void run()> ()
<com.android.bluetooth.map.BluetoothMapService$1: void handleMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean checkAccessPermission(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> ()
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
2 Callers:
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
28 Callers:
<android.provider.BrowserContract$Settings: boolean isSyncEnabled(android.content.Context)> ()
<com.android.browser.provider.BrowserProvider2: java.lang.String[] getAccountNameAndType(long)> ()
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> ()
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ()
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ()
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> ()
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> ()
<com.android.browser.DataController$DataControllerHandler: void doLoadThumbnail(com.android.browser.Tab)> ()
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> ()
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ()
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: com.android.browser.AddBookmarkPage$EditBookmarkInfo loadInBackground()> ()
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Void doInBackground(java.lang.Void[])> ()
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> ()
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> ()
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.browser.provider.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> ()
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> ()
<com.android.browser.homepages.RequestHandler: void writeTemplatedIndex()> ()
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> ()
<com.android.browser.provider.BrowserProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> ()
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> ()
<com.android.browser.provider.BrowserProvider2: int updateHistoryInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[])> ()
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> ()
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> ()
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: void loadBookmarks()> ()
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> ()
<com.android.browser.SuggestionsAdapter$CombinedCursor: void runQuery(java.lang.CharSequence)> ()
Permission:android.permission.READ_SYNC_STATS
8 Callers:
<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> ()
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> (1)
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> ()
<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> ()
<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> ()
Permission:android.permission.ACCESS_MOCK_LOCATION
1 Callers:
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> ()
Permission:android.permission.READ_CALL_LOG
6 Callers:
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> ()
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> ()
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> ()
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> ()
Permission:android.permission.SEND_SMS
7 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
Permission:android.permission.RECORD_AUDIO
3 Callers:
<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener)> ()
<android.media.AudioRecord: void <init>(int,int,int,int,int)> ()
<android.media.MediaRecorder: void setAudioSource(int)> ()
Permission:android.permission.CAMERA
3 Callers:
<android.hardware.Camera: android.hardware.Camera open()> ()
<android.hardware.Camera: void native_setup(java.lang.Object)> ()
<android.media.MediaRecorder: void setVideoSource(int)> ()
Permission:android.permission.VIBRATE
6 Callers:
<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)> (1)
<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,long,android.os.IBinder)> ()
<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (1)
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> ()
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> (1)
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> ()
Permission:android.permission.KILL_BACKGROUND_PROCESSES
2 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> ()
<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()> ()
Permission:android.permission.READ_SMS
33 Callers:
<com.android.bluetooth.map.BluetoothMapContent: byte[] getMmsMessage(long,com.android.bluetooth.map.BluetoothMapAppParams)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageMms(long)> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> ()
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> ()
<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> ()
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> ()
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void failPendingMessages()> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChangesSms()> ()
<com.android.bluetooth.map.BluetoothMapContent: boolean msgListingHasUnread(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> ()
<com.android.bluetooth.map.BluetoothMapContent: com.android.bluetooth.map.BluetoothMapMessageListing msgListing(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void initMsgList()> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> ()
<com.android.bluetooth.map.BluetoothMapContent: int msgListingSize(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> ()
<com.android.bluetooth.map.BluetoothMapContent: byte[] getSmsMessage(long,int)> ()
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ()
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void resendPendingMessages()> ()
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageMms(long)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChangesMms()> ()
<com.android.bluetooth.map.BluetoothMapContent: void dumpMmsTable()> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
Permission:android.permission.GET_PACKAGE_SIZE
2 Callers:
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (1)
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> ()
Permission:android.permission.USE_SIP
18 Callers:
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> (1)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()> ()
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> (1)
<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile)> ()
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<com.android.server.sip.SipService: void close(java.lang.String)> (1)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> (1)
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> ()
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> (1)
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> ()
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> ()
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> ()
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (1)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)> ()
Permission:android.permission.RESTART_PACKAGES
1 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> ()
Permission:android.permission.MODIFY_AUDIO_SETTINGS
12 Callers:
<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)> ()
<android.media.AudioManager: boolean isBluetoothA2dpOn()> ()
<android.media.AudioManager: boolean isWiredHeadsetOn()> ()
<android.media.AudioManager: void setMicrophoneMute(boolean)> ()
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> ()
<android.media.AudioManager: void setParameters(java.lang.String)> ()
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)> ()
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> ()
<android.server.BluetoothA2dpService: void onBluetoothEnable()> ()
<android.server.BluetoothA2dpService: void onBluetoothDisable()> ()
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
Permission:android.permission.DISABLE_KEYGUARD
8 Callers:
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> (1)
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> ()
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> (1)
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> ()
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<com.android.server.wm.WindowManagerService: void dismissKeyguard()> (1)
<android.view.IWindowManager$Stub$Proxy: void dismissKeyguard()> ()
Permission:android.permission.READ_CONTACTS
52 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.bluetooth.map.BluetoothMapContent: java.lang.String setWhereFilterPhones(java.lang.String)> ()
<com.android.exchange.adapter.ContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncParser$ContactOperations)> ()
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> ()
<com.android.exchange.service.EasContactsSyncHandler: void setUpsyncCommands(com.android.exchange.adapter.Serializer)> ()
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,com.android.ex.chips.BaseRecipientAdapter,java.util.ArrayList,int,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> ()
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> ()
<com.android.mail.utils.NotificationUtils: java.util.ArrayList findContacts(android.content.Context,java.util.Collection)> ()
<com.android.mail.providers.SuggestionsProvider$ContactsCursor: com.android.mail.providers.SuggestionsProvider$ContactsCursor query(java.lang.String)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> ()
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> ()
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> ()
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> ()
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> ()
<com.android.mail.SenderInfoLoader: com.google.common.collect.ImmutableMap loadContactPhotos(android.content.ContentResolver,java.util.Set,boolean)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> ()
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> ()
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> ()
<com.android.ex.chips.BaseRecipientAdapter$DefaultFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> ()
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean hasContentChanged()> ()
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean hasContentChanged()> (1)
<com.android.mail.utils.NotificationUtils: android.graphics.Bitmap getContactIcon(android.content.Context,java.lang.String,java.lang.String,com.android.mail.providers.Folder)> ()
<android.widget.QuickContactBadge: void onClick(android.view.View)> ()
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> ()
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> ()
<com.android.providers.telephony.SmsProvider: android.net.Uri insertInner(android.net.Uri,android.content.ContentValues)> ()
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$200()> ()
<com.android.bluetooth.pbap.BluetoothPbapUtils: boolean isProfileSet(android.content.Context)> ()
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> ()
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> ()
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapContent: java.lang.String getContactNameFromPhone(java.lang.String)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: int getContactCount()> ()
<com.android.internal.notification.DemoContactNotificationScorer: boolean hasStarredContact(android.os.Bundle)> ()
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<com.android.calendar.event.EventLocationAdapter: java.util.List queryContacts(android.content.ContentResolver,java.lang.String,java.util.HashSet)> ()
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> ()
<com.android.bluetooth.map.BluetoothMapContent: void setVCardFromPhoneNumber(com.android.bluetooth.map.BluetoothMapbMessage,java.lang.String,boolean)> ()
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.WRITE_CONTACTS
42 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> ()
<com.android.exchange.service.EasContactsSyncHandler: void dirtyContactsWithinDirtyGroups()> ()
<com.android.email.service.EmailServiceUtils: void moveContactsData(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> ()
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> ()
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> ()
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> ()
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$200()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> ()
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> ()
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.exchange.service.EasContactsSyncHandler: void cleanup(int)> ()
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> ()
<com.android.exchange.adapter.ContactsSyncParser$ContactOperations: void delete(long)> ()
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> ()
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> ()
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> ()
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> ()
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> ()
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.RECEIVE_SMS
8 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableGsmBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableGsmBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCdmaBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCdmaBroadcastRange(int,int)> ()
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: boolean handleServiceCategoryProgramData(com.android.internal.telephony.cdma.SmsMessage)> ()
Permission:android.permission.WRITE_CALENDAR
30 Callers:
<com.android.calendar.EventInfoFragment: void createExceptionResponse(long,int)> ()
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> ()
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> ()
<com.android.calendar.event.EditEventFragment: void saveReminders()> ()
<com.android.calendar.alerts.AlertActivity: void dismissAlarm(long,long,long)> ()
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void doSaveAction()> ()
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> ()
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> ()
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> ()
<com.android.calendar.CalendarColorPickerDialog$OnCalendarColorSelectedListener: void onColorSelected(int)> ()
<com.android.calendar.EventInfoFragment: void updateResponse(long,long,int)> ()
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.GlobalDismissManager: void syncReceiverDismissCache(android.content.Context)> ()
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)> ()
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> ()
<com.android.calendar.EventInfoFragment: boolean saveReminders()> ()
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> ()
<com.android.calendar.EventInfoFragment: boolean saveEventColor()> ()
<com.android.email.service.EmailServiceUtils: void moveCalendarData(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.calendar.DeleteEventHelper: void deleteExceptionEvent()> ()
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> ()
<com.android.calendar.alerts.AlertActivity: void dismissFiredAlarms()> ()
<com.android.calendar.alerts.InitAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> ()
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onPause()> (1)
<com.android.calendar.DeleteEventHelper$2: void onClick(android.content.DialogInterface,int)> ()
<com.android.calendar.alerts.AlertService: void dismissOldAlerts(android.content.Context)> ()
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.REORDER_TASKS
3 Callers:
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)> ()
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> ()
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> ()
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
2 Callers:
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)> ()
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)> ()
Permission:android.permission.TRANSMIT_IR
4 Callers:
<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])> (1)
<android.hardware.IConsumerIrService$Stub$Proxy: void transmit(java.lang.String,int,int[])> ()
<com.android.server.ConsumerIrService: int[] getCarrierFrequencies()> (1)
<android.hardware.IConsumerIrService$Stub$Proxy: int[] getCarrierFrequencies()> ()
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
1 Callers:
<com.android.server.wifi.WifiService: void enforceMulticastChangePermission()> ()
Permission:android.permission.ACCESS_NETWORK_STATE
6 Callers:
<com.android.server.ConnectivityService: void enforceAccessPermission()> ()
<com.android.server.ConnectivityService: void enforceTetherAccessPermission()> ()
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> ()
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (1)
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> ()
Permission:android.permission.READ_PROFILE
1 Callers:
<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)> ()
Permission:android.permission.CLEAR_APP_CACHE
4 Callers:
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (1)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> ()
<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)> (1)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> ()
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
26 Callers:
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> ()
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> ()
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> ()
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> ()
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> ()
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> ()
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> ()
<com.android.browser.BookmarkUtils$1$1: void run()> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> ()
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> ()
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> ()
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ()
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> ()
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> ()
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> ()
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.browser.Controller$PruneThumbnails: void run()> ()
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> ()
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> ()
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> ()
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> ()
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> ()
Permission:android.permission.SYSTEM_ALERT_WINDOW
1 Callers:
<com.android.internal.policy.impl.PhoneWindowManager: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])> ()